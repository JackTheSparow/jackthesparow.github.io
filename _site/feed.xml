<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-19T06:02:47-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JackTheSparow</title><subtitle>Welcome to The Pirates Bay. The website is under development</subtitle><entry><title type="html">NSA Codebreakers 2024</title><link href="http://localhost:4000/nsa-codebreakers-2024" rel="alternate" type="text/html" title="NSA Codebreakers 2024" /><published>2025-01-20T02:38:20-05:00</published><updated>2025-01-20T02:38:20-05:00</updated><id>http://localhost:4000/codebreakers_writeup</id><content type="html" xml:base="http://localhost:4000/nsa-codebreakers-2024"><![CDATA[<h3 id="task-1">Task 1</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span>file shipped.db
</code></pre></div></div>
<ul>
  <li>
    <p>Tried to open with OpenSQLite browser but couldn’t open it. Shows encrypted.</p>
  </li>
  <li>
    <p>Then found out it is not an encrypted file:</p>
  </li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span>fcrackzip <span class="nt">-v</span> <span class="nt">-u</span> <span class="nt">-D</span> <span class="nt">-p</span> /usr/share/wordlists/rockyou.txt shipping.db                         
<span class="go">'mimetype' is not encrypted, skipping
'Configurations2/toolpanel/' is not encrypted, skipping
'Configurations2/progressbar/' is not encrypted, skipping
'Configurations2/statusbar/' is not encrypted, skipping
'Configurations2/toolbar/' is not encrypted, skipping
'Configurations2/floater/' is not encrypted, skipping
'Configurations2/popupmenu/' is not encrypted, skipping
'Configurations2/menubar/' is not encrypted, skipping
'manifest.rdf' is not encrypted, skipping
found id 6ecd93cd, 'shipping.db' is not a zipfile ver 2.xx, skipping
no usable files found
</span></code></pre></div></div>

<ul>
  <li>
    <p>After Unzipping, tried to view content of content.xml: All Gibbrish</p>
  </li>
  <li>Tried to reconstruct it in readable format:
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span>zip <span class="nt">-r</span> ../files.odt <span class="k">*</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Word  &amp; Libreoffice don’t show good format, not readable and cannot be analyzed</p>
  </li>
  <li>
    <p>Reconstructing to Sqlite file using python script.</p>
  </li>
  <li>
    <p>Finally reconstructed after trial and error.</p>
  </li>
  <li>Found Guardian Armamenet a suspicious company from Thumbnails.png after Googling all companies names</li>
</ul>

<p>Random Entry for a different addresss at No:899 which is suspicous</p>

<p><strong>Boom Flag</strong></p>

<p><img src="/assets/task1.png" alt="Task 1 Badge" /></p>

<h3 id="task-2">Task 2</h3>

<p>Create ZFS Pool on Ubuntu using following commands:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span>lsblk
<span class="gp">$</span><span class="nb">sudo </span>fallocate <span class="nt">-l</span> 1G /tmp/zfs-disk.img
<span class="gp">$</span><span class="nb">sudo </span>losetup <span class="nt">-fP</span> /tmp/zfs-disk.img
<span class="gp">$</span>losetup <span class="nt">-a</span>
<span class="gp">$</span>lsblk
<span class="gp">$</span><span class="nb">sudo </span>zpool create nkfipool /dev/loop46
<span class="gp">$</span><span class="nb">sudo </span>zfs create nkfipool/rjfs
<span class="gp">$</span>zfs list <span class="nt">-t</span> snapshot
<span class="gp">$</span>zpool list
</code></pre></div></div>

<p>If directory is hidden:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="nb">sudo </span>zfs get snapdir nkfipool/rjfs
<span class="gp">$</span><span class="nb">sudo </span>zfs <span class="nb">set </span><span class="nv">snapdir</span><span class="o">=</span>visible nkfipool/rjfs
<span class="gp">$</span><span class="nb">sudo </span>zfs get snapdir nkfipool/rjfs
</code></pre></div></div>

<p>Info on Pool:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="nb">sudo </span>zdb <span class="nt">-vvv</span> nkfipool/rjfs
</code></pre></div></div>

<p>Manually Recover each Snapshot SEQUENTIALLY using source GUID &amp; Destination GUID:</p>

<p>View GUID:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="k">for </span>f <span class="k">in</span> <span class="k">*</span><span class="p">;</span> <span class="k">do </span>file <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f1</span>,4,5 | column <span class="nt">-t</span> <span class="nt">-s</span> <span class="s1">':'</span>
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>zfs receive nkfipool/rjfs <span class="o">&gt;</span> logseq24006643128753-i
</code></pre></div></div>

<p>Check directory of each recovered snapshot: :/nkfipool/rjfs/planning/pages</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span>
<span class="go"> contents.md        'Elliptic curve recovery.md'   LLM.md   'token generation.md'  'ZFS snapshots.md'
'CUDA elliptic.md'   golang.md                     todo.md   tools.md
</span></code></pre></div></div>

<p>Do checksum of each file</p>

<p>Write Script to do checksum of each file, then print it:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="o">!</span>/bin/bash
<span class="go">
</span><span class="gp">#</span><span class="w"> </span>Base directory where all logseq directories are stored
<span class="go">BASE_DIR="/nkfipool/rjfs/.zfs/snapshot"

</span><span class="gp">#</span><span class="w"> </span>List of logseq directories
<span class="go">LOGSEQ_DIRS=(
    "logseq11079254764090"
    "logseq11652828730004"
    "logseq11865316111135"
    "logseq1275510227140"
    "logseq169607977607"
    "logseq1838778124435"
    "logseq18584850428477"
    "logseq211821980113211"
    "logseq24006643128753"
    "logseq259372600032543"
    "logseq263292687127458"
    "logseq269718728817"
    "logseq27077118912783"
    "logseq30280209123973"
    "logseq307981931423438"
    "logseq4015160425167"
    "logseq73041633518013"
    "logseq77311709316810"
    "logseq81871640320073"
    "logseq98931947620095"
)

</span><span class="gp">#</span><span class="w"> </span>Iterate through each logseq directory
<span class="gp">for logseq_dir in "$</span><span class="o">{</span>LOGSEQ_DIRS[@]<span class="o">}</span><span class="s2">"; do
</span><span class="gp">    #</span><span class="w"> </span><span class="s2">Directory containing files
</span><span class="gp">    PAGES_DIR="$</span><span class="s2">BASE_DIR/</span><span class="nv">$logseq_dir</span><span class="s2">/planning/pages"</span>
<span class="go">    
</span><span class="gp">    #</span><span class="w"> </span>Check <span class="k">if </span>the directory exists
<span class="gp">    if [ -d "$</span>PAGES_DIR<span class="s2">" ]; then
</span><span class="gp">        #</span><span class="s2">echo "</span>Processing files <span class="k">in</span> <span class="nv">$PAGES_DIR</span><span class="s2">"
</span><span class="go">	echo ""
        
</span><span class="gp">        #</span><span class="w"> </span>Iterate through each file <span class="k">in </span>the pages directory
<span class="gp">        for file in "$</span>PAGES_DIR<span class="s2">"/*; do
</span><span class="gp">            if [ -f "$</span><span class="s2">file"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="gp">                #</span><span class="w"> </span>Print the SHA256 checksum of the file
<span class="gp">                sha256sum "$</span>file<span class="s2">"
</span><span class="go">            fi
        done
    else
</span><span class="gp">        #</span><span class="nb">echo</span> <span class="s2">"Directory </span><span class="nv">$PAGES_DIR</span><span class="s2"> does not exist or is inaccessible."</span>
<span class="go">	echo ""
    fi
done
</span></code></pre></div></div>

<p><strong>Boom You’ve got all checksums</strong></p>

<p><img src="/assets/task2.png" alt="Task 2 Badge" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Task 1]]></summary></entry><entry><title type="html">qcow2 Virtual Machine Image Compression</title><link href="http://localhost:4000/qemu-images-storage-space" rel="alternate" type="text/html" title="qcow2 Virtual Machine Image Compression" /><published>2023-12-10T02:38:20-05:00</published><updated>2023-12-10T02:38:20-05:00</updated><id>http://localhost:4000/qemu_images</id><content type="html" xml:base="http://localhost:4000/qemu-images-storage-space"><![CDATA[<h3 id="kvm-qcow2-image-compression">KVM qcow2 Image Compression</h3>

<p>Have you ever encountered your QEMU-KVM Virtual Machine Image in qcow2 format eating your storage space?
If yes, today we will solve that problem. The problem is due to <code class="language-plaintext highlighter-rouge">thin provisioning</code></p>

<p>QEMU-KVM Virtual Machine(VM) Images take extra space with snapshots as original image size increases.
We will restore the image to minimal size, deleting extra space occupied by snapshots.</p>

<details>
  <summary> Thin Provisioning</summary>
  <p>When a snapshot is taken, the changes made to the VM after the snapshot are stored in a separate file. With thin provisioning, the snapshot size can increase dynamically as more data is written to the VM after the snapshot is taken. This means that the snapshot will only consume additional space as changes occur, rather than reserving a fixed amount of space upfront.</p>
</details>

<h3 id="general">General</h3>

<ul>
  <li>Snapshots acquire double space that of virtual disk and don’t erase back automatically.</li>
  <li>Delete Snapshots using CLI(qemu-img)</li>
  <li>Always try to use cli qemu for creating VMs and operating them</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">ls</code> cannot understand <a href="#### thin-provisioning"><code class="language-plaintext highlighter-rouge">thin provisioning</code></a> , use Disk Utility <code class="language-plaintext highlighter-rouge">du</code> instead</p>

<p>Here is my sample disk size:
<img src="assets/qcow2_size.png" alt="qcow2-image-size" /></p>

<p><strong>qemu-img</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">qemu-img info Qubes.qcow2</code></li>
</ul>

<p><strong>Deleting Snapshots</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sudo qemu-img snapshot -d snapshot2(name) CTF.qcow2</code></li>
</ul>

<p><strong>virt-sparsify</strong></p>

<p>Free space within the disk image can be converted back to free space on the host. Check <a href="https://libguestfs.org/virt-sparsify.1.html">documentation</a> 
for all features.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sudo virt-sparsify -v -x --in-place CTF.qcow2</code></li>
  <li><code class="language-plaintext highlighter-rouge">sudo virt-sparsify CTF.qcow2 compressedCTF.qcow2</code></li>
</ul>

<h3 id="before-compression">Before Compression</h3>
<p><img src="/assets/before_size.png" alt="size-of-qcow2-image-before-compression" /></p>

<h3 id="after-compression">After Compression</h3>
<p><img src="/assets/after_size.png" alt="size-of-qcow2-image-after-compression" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[KVM qcow2 Image Compression]]></summary></entry><entry><title type="html">CSAW CTF 2023</title><link href="http://localhost:4000/csaw-2023" rel="alternate" type="text/html" title="CSAW CTF 2023" /><published>2023-09-17T03:38:20-04:00</published><updated>2023-09-17T03:38:20-04:00</updated><id>http://localhost:4000/csaw_writeup</id><content type="html" xml:base="http://localhost:4000/csaw-2023"><![CDATA[<h3 id="pwn">Pwn</h3>

<h4 id="my-first-pwnie">My First Pwnie</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="c1"># Pwn mostly builds on top of rev.
# While rev is more about understanding how a program works, pwn is more about figuring out how to exploit a program to reach the holy grail: Arbitrary Code Execution
#
# If you can execute arbitrary code on a system, that system might as well be yours...because you can do whatever you want with it! (this is the namesake of "pwn".....if you pwn a system, you own the system)
# Of course, that comes with the limitations of the environment you are executing code in...are you a restricted user, or a super admin?
# Sometimes you can make yourself a super admin starting from being a restricted user.....but we're not gonna do that right now.
#
# For now, I want you to figure out how to execute arbitrary commands on the server running the following code.
#
# To prove to me that you can excute whatever commands you want on the server, you'll need to get the contents of `/flag.txt`
</span>
<span class="k">try</span><span class="p">:</span>
  <span class="n">response</span> <span class="o">=</span> <span class="nf">eval</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">What</span><span class="sh">'</span><span class="s">s the password? </span><span class="sh">"</span><span class="p">))</span>
  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">You entered `</span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="s">`</span><span class="sh">"</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Yay! Correct! Congrats!</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">quit</span><span class="p">()</span>
<span class="k">except</span><span class="p">:</span>
  <span class="k">pass</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Nay, that</span><span class="sh">'</span><span class="s">s not it.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div>
<p>I tried different commands such as:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">import</span><span class="p">(</span><span class="sh">'</span><span class="s">subprocess</span><span class="sh">'</span><span class="p">).</span><span class="nf">getoutput</span><span class="p">(</span><span class="sh">'</span><span class="s">cat flag.txt</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">import</span><span class="p">(</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">).</span><span class="nf">system</span><span class="p">(</span><span class="sh">'</span><span class="s">rm -rf /</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>
<p>Then finally connected to server using Netcat</p>

<p><img src="/assets/csaw_first_pwnie.png" alt="Pwnie Solution" /></p>

<p>Flag: <code class="language-plaintext highlighter-rouge">
🚩 csawctf{neigh______}
</code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Pwn]]></summary></entry><entry><title type="html">Winner CyberCup Hackathon 2 &amp;amp; 3</title><link href="http://localhost:4000/cybercup-hackathon" rel="alternate" type="text/html" title="Winner CyberCup Hackathon 2 &amp;amp; 3" /><published>2023-01-21T02:38:20-05:00</published><updated>2023-01-21T02:38:20-05:00</updated><id>http://localhost:4000/cybercup-hackathon</id><content type="html" xml:base="http://localhost:4000/cybercup-hackathon"><![CDATA[<h3 id="cybercup-20-2023">CyberCup 2.0 2023</h3>

<p>Overall Positon: Second</p>

<p>Prize Won: INR 10,000</p>

<p>24 Hours Hackathon</p>

<p>Organizer: Amity University, 18th- 19th January 2023</p>

<p>Problem Statement: <a href="https://amity.edu/aset/confluence2023/problem_statement_cb.html">Cybersecurity and Blockchain</a>:</p>

<p>You are the Lead Cybersecurity Architect for Cybersecurity and Compliance (CSAC) department
In 2020, University discovered a serious cyber-attack. There was a Supply Chain Attack as advised by a trusted intel. 
As Lead Cybersecurity Architect, develop a cybersecurity program for university and present your strategy for detection, containing and removal of the malware as well as your implementation and execution roadmap to the Executive Committee (EC) using NIST Framework.</p>

<p>Our Solution(Upload Pending):</p>

<p>I am thrilled to share the story of how my team, Pirates Bay,
achieved an incredible victory in the Cybersecurity &amp; Blockchain Domain out of three domains.</p>

<p>In order to make the story seem realistic we designed a scenario of attacking a Systems Engineer with Admin Privileges from a famous Supply Chain Service Provider to the College.</p>

<p>Will be updating it soon with our script that we created to analyze network logs and setup Honey Pots</p>

<h3 id="cybercup-30-2024">CyberCup 3.0 2024</h3>

<p>Overall Positon: Third</p>

<p>Startup Incubator Fund: INR 20,000</p>

<p>Cash Prize: INR 2,000</p>

<p>AWS Subscriptions</p>

<p>Organizer: Amity University, 28th January 2024</p>

<p>Problem Statement: Design a SIEM like tool to monitor network activity and visually represent network traffic and other indicators of compromise to network administrator.</p>

<p>Solution(Will Upload Soon)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[CyberCup 2.0 2023]]></summary></entry></feed>